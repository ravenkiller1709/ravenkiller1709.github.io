[[file:index.org][Back to main site]]
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+title: My Emacs configuration
* start by setting the initial font
#+begin_src emacs-lisp :tangle ./init.el
(set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)
#+end_src
* Manage the package setup
#+begin_src emacs-lisp :tangle ./init.el
  (require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))


  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

* Key Bindings
My custom keybindings:
#+begin_src emacs-lisp :tangle ./init.el
  ;; toggle line numbers
  (global-set-key "\C-x\l" 'display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  ;; start shell
  (global-set-key "\C-z" 'eshell)
  ;; Select window with ace-window
  (use-package ace-window
    :ensure ace-window
    :config (setq aw-keys '(?a ?c ?e ?u ?e ?d ?h ?t ?n ?s))
    :bind ("C-x o" . ace-window))
  ;reduce keystrokes replying
  (fset 'yes-or-no-p 'y-or-n-p)
  (setenv "HOME" "/home/kim/")
#+end_src
* Window movements with ace window
#+BEGIN_SRC emacs-lisp :tangle ./init.el
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jumb-face-foreground :height 3.0)))))
    ))
 #+END_SRC
* Font rational
#+begin_src emacs-lisp :tangle ./init.el
    (custom-set-variables
     '(rational-ui-default-font
       '(:font "JetBrains Mono" :weight light :height 185)))

#+end_src

* Doom Theme
#+begin_src emacs-lisp :tangle ./init.el
(use-package doom-themes
  :init (load-theme 'doom-palenight t))
#+end_src
* Doom Modeline setup
#+begin_src emacs-lisp :tangle ./init.el
    (use-package all-the-icons
      :ensure t)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 25)))
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
#+end_src

* Dired configuration
Dired is a built-in file manager for Emacs that does some pretty amazing
things! Here are some key bindings you should try out:
Key Bindings
Navigation

Emacs / Evil

    n / j - next line
    p / k - previous line
    j / J - jump to file in buffer
    RET - select file or directory
    ^ - go to parent directory
    S-RET / g O - Open file in “other” window
    M-RET - Show file in other window without focusing (previewing files)
    g o (dired-view-file) - Open file but in a “preview” mode, close
    with q
    g / g r Refresh the buffer with revert-buffer after changing con-
    figuration (and after filesystem changes!)

Marking files

    m - Marks a file
    u - Unmarks a file
    U - Unmarks all files in buffer
    * t / t - Inverts marked files in buffer
    % m - Mark files in buffer using regular expression
    * - Lots of other auto-marking functions
    k / K - “Kill” marked items (refresh buffer with g / g r to get them
    back)
    Many operations can be done on a single file if there are no active
    marks!

Copying and Renaming files

    C - Copy marked files (or if no files are marked, the current file)
    Copying single and multiple files
    U - Unmark all files in buffer
    R - Rename marked files, renaming multiple is a move!
    % R - Rename based on regular expression: ^test , old-\&

Power command: C-x C-q (dired-toggle-read-only) - Makes all file names in
the buffer editable directly to rename them! Press Z Z to confirm renaming
or Z Q to abort.
Deleting files

    D - Delete marked file
    d - Mark file for deletion
    x - Execute deletion for marks
    delete-by-moving-to-trash - Move to trash instead of deleting per-
    manently

Creating and extracting archives

    Z - Compress or uncompress a file or folder to (.tar.gz)
    c - Compress selection to a specific file
    dired-compress-files-alist - Bind compression commands to file exten-
    sion

Other common operations

    T - Touch (change timestamp)
    M - Change file mode
    O - Change file owner
    G - Change file group
    S - Create a symbolic link to this file
    L - Load an Emacs Lisp file into Emacs

this is the Emacs filehandling and the filemanager
#+begin_src emacs-lisp :tangle ./init.el
  (use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first")))
(use-package dired-single)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-open
  :config
  ;; Doesn't work as expected!
  ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
  (setq dired-open-extensions '(("png" . "feh")
                                ("mkv" . "mpv")
				("mp3" . "mplayer"))))
#+end_src
* Org Mode Better Font Faces
The efs/org-font-setup function configures various text faces to
tweak the sizes of headings and use variable width fonts in most
cases so that it looks more like we’re editing a document in org-
mode. We switch back to fixed width (monospace) fonts for code
blocks and tables so that they display correctly.
#+begin_src emacs-lisp :tangle ./init.el
  (defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
  (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
  (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))
#+end_src

* Org Bullets
#+begin_src emacs-lisp :tangle ./init.el
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

    (setq org-ellipsis " ▾")

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 80
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

   (setq org-latex-pdf-process
	    '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))

  (require 'org-tempo)


  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))

      (add-to-list 'org-latex-classes
		   '("ethz"
		     "\\documentclass[a4paper,11pt,titlepage]{memoir}
      \\usepackage[utf8]{inputenc}
      \\usepackage[T1]{fontenc}
      \\usepackage{fixltx2e}
      \\usepackage{graphicx}
      \\usepackage{longtable}
      \\usepackage{float}
      \\usepackage{wrapfig}
      \\usepackage{rotating}
      \\usepackage[normalem]{ulem}
      \\usepackage{amsmath}
      \\usepackage{textcomp}
      \\usepackage{marvosym}
      \\usepackage{wasysym}
      \\usepackage{amssymb}
      \\usepackage{hyperref}
      \\usepackage{mathpazo}
      \\usepackage{color}
      \\usepackage{enumerate}
      \\definecolor{bg}{rgb}{0.95,0.95,0.95}
      \\tolerance=1000
	    [NO-DEFAULT-PACKAGES]
	    [PACKAGES]
	    [EXTRA]
      \\linespread{1.1}
      \\hypersetup{pdfborder=0 0 0}"
		     ("\\chapter{%s}" . "\\chapter*{%s}")
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


      (add-to-list 'org-latex-classes
		   '("article"
		     "\\documentclass[11pt,a4paper]{article}
      \\usepackage[utf8]{inputenc}
      \\usepackage[T1]{fontenc}
      \\usepackage{fixltx2e}
      \\usepackage{graphicx}
      \\usepackage{longtable}
      \\usepackage{float}
      \\usepackage{wrapfig}
      \\usepackage{rotating}
      \\usepackage[normalem]{ulem}
      \\usepackage{amsmath}
      \\usepackage{textcomp}
      \\usepackage{marvosym}
      \\usepackage{wasysym}
      \\usepackage{amssymb}
      \\usepackage{hyperref}
      \\usepackage{mathpazo}
      \\usepackage{color}
      \\usepackage{enumerate}
      \\definecolor{bg}{rgb}{0.95,0.95,0.95}
      \\tolerance=1000
	    [NO-DEFAULT-PACKAGES]
	    [PACKAGES]
	    [EXTRA]
      \\linespread{1.1}
      \\hypersetup{pdfborder=0 0 0}"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")))


      (add-to-list 'org-latex-classes '("ebook"
					"\\documentclass[11pt, oneside]{memoir}
      \\setstocksize{9in}{6in}
      \\settrimmedsize{\\stockheight}{\\stockwidth}{*}
      \\setlrmarginsandblock{2cm}{2cm}{*} % Left and right margin
      \\setulmarginsandblock{2cm}{2cm}{*} % Upper and lower margin
      \\checkandfixthelayout
      % Much more laTeX code omitted
      "
					("\\chapter{%s}" . "\\chapter*{%s}")
					("\\section{%s}" . "\\section*{%s}")
					("\\subsection{%s}" .
  "\\subsection*{%s}")))
#+end_src

* Org Mode Basic Config
#+begin_src emacs-lisp :tangle ./init.el
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :pin org
  :commands (org-capture org-agenda)
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
        '("~/Projekter/Kode/OrgFiles/Opgaver.org"
          "~/Projekter/Kode/OrgFiles/Vaner.org"
          "~/Projekter/Kode/OrgFiles/Fødselsdage.org"))

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
    '(("Archive.org" :maxlevel . 1)
      ("Opgaver.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projekter")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))

    ("W" "Work Tasks" tags-todo "+work-email")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projekter")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projekter")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projekter")
             (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
    `(("t" "Tasks / Projekter")
      ("tt" "Task" entry (file+olp "~/Projekter/Kode/OrgFiles/Opgaver.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/Projekter/Kode/OrgFiles/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/Projekter/Kode/OrgFiles/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/Projekter/Kode/OrgFiles/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "~/Projekter/Kode/OrgFiles/Metrics.org" "Weight")
       "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))

  (efs/org-font-setup))
#+end_src
* Org Roam - notes
#+begin_src emacs-lisp :tangle ./init.el
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Noter")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point)
	   :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))

#+end_src
* Structure Templates
#+begin_src emacs-lisp :tangle ./init.el
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src
* Babel tangle this configuration

   #+begin_src emacs-lisp :tangle ./init.el
   (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))

   (setq org-confirm-babel-evaluate nil)
   
   #+end_src

   #+RESULTS:

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

* Which Key
which-key is a useful UI panel that appears when you start pressing
any key binding in Emacs to offer you all possible completions for
the prefix. For example, if you press C-c (hold control and press
the letter c), a panel will appear at the bottom of the frame dis-
playing all of the bindings under that prefix and which command they
run. This is very useful for learning the possible key bindings in
the mode of your current buffer.
#+begin_src emacs-lisp :tangle ./init.el
  (use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
#+end_src
* Counsel & Ivy
#+begin_src emacs-lisp :tangle ./init.el
    (use-package counsel
      :ensure t)

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (setq enable-recursive-minibuffers t)
    )

    (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("C-M-j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  ;(prescient-persist-mode 1)
  (ivy-prescient-mode 1))

      (use-package swiper
	:ensure try
	:bind (("C-s" . swiper)
	       ("C-r" . swiper)
	       ("C-c C-r" . ivy-resume)
	       ("M-x" . counsel-M-x)
	       ("C-x C-f" . counsel-find-file))
	:config
	(progn
	  (ivy-mode 1)
	  (setq ivy-use-virtual-buffers t)
	  (setq ivy-display-style 'fancy)
	  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	  ))

    (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char))
#+end_src

* Helm sorting and completion
#+begin_src emacs-lisp :tangle ./init.el
  (use-package vertico
  :ensure t
  :bind (:map vertico-map
         ("C-j" . vertico-next)
         ("C-k" . vertico-previous)
         ("C-f" . vertico-exit)
         :map minibuffer-local-map
         ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
  :init
  (vertico-mode))

;;(use-package savehist
;;  :init
;;  (savehist-mode))

(use-package marginalia
  :after vertico
  :ensure t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))
#+end_src
* Let's get encrypted
#+begin_src emacs-lisp :tangle ./init.el
  (setenv "GPG_AGENT_INFO" nil)  ;; use emacs pinentry
    (setq auth-source-debug t)

    (setq epg-gpg-program "gpg2")  ;; not necessary
    (require 'epa-file)
    (epa-file-enable)
(setq epa-pinentry-mode 'loopback)
(setq epg-pinentry-mode 'loopback)

    (require 'org-crypt)
    (org-crypt-use-before-save-magic)

(defun efs/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
	(funcall (plist-get (car result) :secret))
      nil)))
#+end_src

* Autocomplete
#+begin_src emacs-lisp :tangle ./init.el
    (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
  (ido-yes-or-no-mode t)

  (defalias 'list-buffers 'ibuffer)

  (defalias 'list-buffers 'ibuffer-other-window)
#+end_src

* Magit
Magit is the best Git interface I’ve ever used. Common Git operations
are easy to execute quickly using Magit’s command panel system.
#+begin_src emacs-lisp :tangle ./init.el
  (use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; NOTE: Make sure to configure a GitHub token before using this package!
;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
(use-package forge
  :after magit)
#+end_src

#+RESULTS:

* Rainbow Delimiters
#+begin_src emacs-lisp :tangle ./init.el
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* EMMS Emacs music player
#+begin_src emacs-lisp :tangle ./init.el
  ;; EMMS basic configuration
  (use-package emms
    :demand t
    :bind
    (("<f3>" . emms)))
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (load "~/.dots/emacs/emms-get-lyrics")
  (setq emms-source-file-default-directory "~/Musik/") ;; Change to your music folder

    ;; Choose one of these
  (setq emms-info-functions '(emms-info-tinytag))  ;; When using Tinytag

  ;; Load cover images
  (setq emms-browser-covers 'emms-browser-cache-thumbnail-async)

  ;; Helm EMMS
  (use-package helm-emms
    :bind
    (("<C-f5>" . helm-emms)))

  (use-package ivy-emms
    :bind
    (("<C-f4>" . ivy-emms)))

    (global-set-key [f3] 'emms-get-lyrics-current-song)

#+end_src

* Erc Chat

#+BEGIN_SRC emacs-lisp
(setq erc-server "irc.libera.chat"
      erc-nick "ravenkiller1709"
      erc-user-full-name "Kim Kruse"
      erc-track-shorten-start 8
      erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
      erc-kill-buffer-on-part t
      erc-auto-query 'bury)

(setq erc-fill-column 120
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20)

(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE" "AWAY")
      erc-hide-list '("JOIN" "NICK" "PART" "QUIT" "MODE" "AWAY"))
      ;; erc-track-exclude-server-buffer t)

(setq erc-track-visibility nil) ; Only use the selected frame for visibility
#+END_SRC
* App launcher
#+begin_src emacs-lisp :tangle ./init.el
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+end_src
* Loading libraries
loading mail settings
#+begin_src emacs-lisp :tangle ./init.el
  (load "~/.dots/emacs/mail.el")
  (require 'mu4e)
#+end_src

* Reveal.js
Enabling presentation mode
#+begin_src emacs-lisp
  (use-package ox-reveal
  :ensure ox-reveal)

  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)
#+end_src


